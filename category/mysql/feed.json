{
    "version": "https://jsonfeed.org/version/1",
    "title": "Being on sea, sail; being on land, settle. • All posts by \"mysql\" category",
    "description": "",
    "home_page_url": "https://new.limina.top",
    "items": [
        {
            "id": "https://new.limina.top/2024/10/22/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BD%91%E7%AB%99-06/",
            "url": "https://new.limina.top/2024/10/22/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BD%91%E7%AB%99-06/",
            "title": "使用 Vue 3 + Element Plus 从头开始写一个数据库网站-06-前端与后端的交互",
            "date_published": "2024-10-22T09:08:29.000Z",
            "content_html": "<h1 id=\"使用-vue-3-element-plus-从头开始写一个数据库网站-06-前端与后端的交互\"><a class=\"anchor\" href=\"#使用-vue-3-element-plus-从头开始写一个数据库网站-06-前端与后端的交互\">#</a> 使用 Vue 3 + Element Plus 从头开始写一个数据库网站 - 06 - 前端与后端的交互</h1>\n<blockquote>\n<p>由于 PrismJS 尚不支持 Vue 的语法高亮，因此 Vue 代码块均先使用 HTML 的高亮</p>\n<p>2024-09-23</p>\n</blockquote>\n<p>在上一步中，我们已经设计并实现了基础的 API 功能。</p>\n<p>现在我们在前端使用 Vue 发送请求并展示数据，分为以下几个步骤：</p>\n<ol>\n<li>安装 Axios 用于发送 HTTP 请求</li>\n<li>发送请求获取数据</li>\n<li>展示 Biomarker 列表</li>\n<li>点击 Biomarker 显示详细信息</li>\n<li>根据条件筛选 Biomarker</li>\n</ol>\n<p>我们仍然通过 Vue 3 的组合式 API 写法来实现这些功能。</p>\n<h2 id=\"安装-axios\"><a class=\"anchor\" href=\"#安装-axios\">#</a> 安装 Axios</h2>\n<p><code>Axios</code>  是一个非常流行的 HTTP 客户端库，可以用来在 Vue 组件中发送 API 请求。</p>\n<ol>\n<li>\n<p><strong>安装 Axios</strong>：</p>\n<p>在项目根目录下运行以下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> axios</pre></td></tr></table></figure></li>\n<li>\n<p><strong>在组件中引入 Axios</strong>：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span></pre></td></tr></table></figure><p>之后你就可以在 Vue 组件中使用 Axios 发送请求。</p>\n</li>\n</ol>\n<h2 id=\"封装与后端-api-的交互逻辑\"><a class=\"anchor\" href=\"#封装与后端-api-的交互逻辑\">#</a> 封装与后端 API 的交互逻辑</h2>\n<p>在根目的  <code>src</code>  文件夹下创建  <code>services/api.js</code> ，并写入：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建 Axios 实例，定义 API 的基础 URL</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">baseURL</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:3000/api'</span>  <span class=\"token comment\">// 后端 API 的基础 URL</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 获取 Biomarkers 数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getBiomarkers</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> api<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/biomarkers'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 获取特定 Biomarker 的详细信息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getBiomarkerDetails</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> api<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/biomarkers/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>id<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 获取筛选选项</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFilters</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> api<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/biomarkers/filters'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"详细解释\"><a class=\"anchor\" href=\"#详细解释\">#</a> 详细解释</h3>\n<ol>\n<li>\n<p><strong> <code>axios.create()</code> </strong>:</p>\n<ul>\n<li>使用  <code>axios.create()</code>  方法创建了一个自定义的  <code>axios</code>  实例，所有请求都会以  <code>http://localhost:3000/api</code>  作为基础 URL。</li>\n<li>这样做的好处是，如果后端地址或端点路径改变，你只需要在一个地方更新  <code>baseURL</code> ，不必逐个修改每个请求的完整 URL。</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>getBiomarkers()</code> </strong>:</p>\n<ul>\n<li>发送  <code>GET</code>  请求到  <code>/biomarkers</code> ，用于获取所有的 biomarker 数据。</li>\n<li>请求的完整 URL 是  <code>http://localhost:3000/api/biomarkers</code> 。</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>createBiomarker(biomarker)</code> </strong>:</p>\n<ul>\n<li>发送  <code>POST</code>  请求到  <code>/biomarkers</code> ，用于在后端创建一个新的 biomarker。 <code>biomarker</code>  是传递的请求体数据。</li>\n<li>请求的完整 URL 是  <code>http://localhost:3000/api/biomarkers</code> 。</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>getFilters()</code> </strong>:</p>\n<ul>\n<li>发送  <code>GET</code>  请求到  <code>/biomarkers/filters</code> ，用于获取筛选选项。</li>\n<li>请求的完整 URL 是  <code>http://localhost:3000/api/biomarkers/filters</code> 。</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>getBiomarkerDetails(id)</code> </strong>:</p>\n<ul>\n<li>发送  <code>GET</code>  请求到  <code>/biomarkers/:id</code> ，用于获取特定 ID 的 biomarker 详细信息。</li>\n<li>请求的完整 URL 是  <code>http://localhost:3000/api/biomarkers/&#123;id&#125;</code> ，其中  <code>&#123;id&#125;</code>  是动态传递的。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> 作用</h3>\n<ul>\n<li>该文件简化了组件中 API 请求的调用。在 Vue 组件中，可以直接通过  <code>getBiomarkers()</code>  或  <code>getFilters()</code>  来获取数据，而不需要在每个组件中重复书写  <code>axios.get()</code>  请求逻辑。</li>\n<li>通过将所有 API 调用放在一个  <code>api.js</code>  文件中，您可以更轻松地管理 API 的端点、逻辑和错误处理。</li>\n</ul>\n<h3 id=\"组件中的使用\"><a class=\"anchor\" href=\"#组件中的使用\">#</a> 组件中的使用</h3>\n<p>在 Vue 组件中引入这些封装好的 API 方法来调用后端：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> getBiomarkers <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../services/api'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> biomarkers <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getBiomarkers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  biomarkers<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"发送请求获取数据\"><a class=\"anchor\" href=\"#发送请求获取数据\">#</a> 发送请求获取数据</h2>\n<p>接下来我们来创建一个 Vue 组件 / 页面，用于展示 Biomarker 列表，在挂载时通过 Axios 发送请求获取数据。</p>\n<h3 id=\"示例组件biomarkerlistvue\"><a class=\"anchor\" href=\"#示例组件biomarkerlistvue\">#</a> 示例组件： <code>BiomarkerList.vue</code></h3>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;BiomarkerList&lt;/h1&gt;\n    &lt;div v-if=&quot;isLoading&quot;&gt;加载中...&lt;/div&gt;\n    &lt;div v-if=&quot;error&quot;&gt;&#123;&#123; error &#125;&#125;&lt;/div&gt;\n    &lt;ul v-if=&quot;biomarkers.length&quot;&gt;\n      &lt;li v-for=&quot;biomarker in biomarkers&quot; :key=&quot;biomarker.id&quot;&gt;\n        &lt;router-link :to=&quot;&#123; name: 'BiomarkerDetail', params: &#123; id: biomarker.id &#125; &#125;&quot;&gt;\n          &#123;&#123; biomarker.name &#125;&#125;\n        &lt;/router-link&gt;\n      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport &#123; ref, onMounted &#125; from 'vue'\nimport axios from 'axios'\n\nconst biomarkers = ref([])   // 存储 biomarker 列表\nconst isLoading = ref(false) // 加载状态\nconst error = ref(null)      // 错误信息\n\n// 组件挂载时获取 biomarker 列表\nonMounted(async () =&gt; &#123;\n  isLoading.value = true\n  try &#123;\n    const response = await axios.get('http://localhost:3000/biomarkers')\n    biomarkers.value = response.data\n  &#125; catch (err) &#123;\n    error.value = '获取 biomarker 列表失败'\n  &#125; finally &#123;\n    isLoading.value = false\n  &#125;\n&#125;)\n&lt;/script&gt;\n</code></pre>\n<h2 id=\"展示-biomarker-列表\"><a class=\"anchor\" href=\"#展示-biomarker-列表\">#</a> 展示 Biomarker 列表</h2>\n<p>在上述示例中：</p>\n<ul>\n<li>当组件挂载（ <code>onMounted</code>  钩子）时，发送一个  <code>GET</code>  请求到后端 API 端点（ <code>/biomarkers</code> ）以获取 biomarker 列表。</li>\n<li>请求成功后，数据会存储在  <code>biomarkers</code>  中，并展示在页面上。</li>\n<li>每个 biomarker 的名称都会生成一个列表项，并使用  <code>router-link</code>  创建可点击的链接，以便用户点击后可以查看详细信息。</li>\n</ul>\n<h2 id=\"点击-biomarker-显示详细信息\"><a class=\"anchor\" href=\"#点击-biomarker-显示详细信息\">#</a> 点击 Biomarker 显示详细信息</h2>\n<p>我们还需要为每个 biomarker 提供详细信息页面。以下是  <code>BiomarkerDetail.vue</code>  组件的代码，它会根据 biomarker 的 ID 获取详细信息并展示：</p>\n<h3 id=\"示例组件biomarkerdetailvue\"><a class=\"anchor\" href=\"#示例组件biomarkerdetailvue\">#</a> 示例组件： <code>BiomarkerDetail.vue</code></h3>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Biomarker 详细信息&lt;/h1&gt;\n    &lt;div v-if=&quot;isLoading&quot;&gt;加载中...&lt;/div&gt;\n    &lt;div v-if=&quot;error&quot;&gt;&#123;&#123; error &#125;&#125;&lt;/div&gt;\n    &lt;div v-if=&quot;biomarker&quot;&gt;\n      &lt;h2&gt;&#123;&#123; biomarker.name &#125;&#125;&lt;/h2&gt;\n      &lt;p&gt;&#123;&#123; biomarker.description &#125;&#125;&lt;/p&gt;\n      &lt;p&gt;类型: &#123;&#123; biomarker.type &#125;&#125;&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport &#123; ref, onMounted &#125; from 'vue'\nimport &#123; useRoute &#125; from 'vue-router'\nimport axios from 'axios'\n\nconst route = useRoute()\nconst biomarker = ref(null)  // 存储 biomarker 详情\nconst isLoading = ref(false) // 加载状态\nconst error = ref(null)      // 错误信息\n\n// 组件挂载时获取 biomarker 详情\nonMounted(async () =&gt; &#123;\n  const biomarkerId = route.params.id\n  isLoading.value = true\n  try &#123;\n    const response = await axios.get(`http://localhost:3000/biomarkers/$&#123;biomarkerId&#125;`)\n    biomarker.value = response.data\n  &#125; catch (err) &#123;\n    error.value = '获取 biomarker 详情失败'\n  &#125; finally &#123;\n    isLoading.value = false\n  &#125;\n&#125;)\n&lt;/script&gt;\n</code></pre>\n<h2 id=\"路由设置\"><a class=\"anchor\" href=\"#路由设置\">#</a> 路由设置</h2>\n<p>为了在点击 biomarker 时跳转到详细信息页面，我们需要在 Vue Router 中配置路由。确保在  <code>router/index.js</code>  中定义相应的路由：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createRouter<span class=\"token punctuation\">,</span> createWebHistory <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> BiomarkerList <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/BiomarkerList.vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> BiomarkerDetail <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/BiomarkerDetail.vue'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'BiomarkerList'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> BiomarkerList <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/biomarkers/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'BiomarkerDetail'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> BiomarkerDetail <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token literal-property property\">history</span><span class=\"token operator\">:</span> <span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  routes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router</pre></td></tr></table></figure><h2 id=\"根据条件筛选-biomarker\"><a class=\"anchor\" href=\"#根据条件筛选-biomarker\">#</a> 根据条件筛选 Biomarker</h2>\n<p>如果你想在前端根据用户输入筛选 biomarker，可以在  <code>BiomarkerList.vue</code>  组件中添加筛选功能。</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Biomarker 列表&lt;/h1&gt;\n    &lt;input v-model=&quot;searchQuery&quot; placeholder=&quot;按名称筛选&quot; /&gt;\n    &lt;button @click=&quot;filterBiomarkers&quot;&gt;筛选&lt;/button&gt;\n    &lt;div v-if=&quot;isLoading&quot;&gt;加载中...&lt;/div&gt;\n    &lt;div v-if=&quot;error&quot;&gt;&#123;&#123; error &#125;&#125;&lt;/div&gt;\n    &lt;ul v-if=&quot;biomarkers.length&quot;&gt;\n      &lt;li v-for=&quot;biomarker in biomarkers&quot; :key=&quot;biomarker.id&quot;&gt;\n        &lt;router-link :to=&quot;&#123; name: 'BiomarkerDetail', params: &#123; id: biomarker.id &#125; &#125;&quot;&gt;\n          &#123;&#123; biomarker.name &#125;&#125;\n        &lt;/router-link&gt;\n      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport &#123; ref, onMounted &#125; from 'vue'\nimport axios from 'axios'\n\nconst biomarkers = ref([])   // 存储 biomarker 列表\nconst isLoading = ref(false) // 加载状态\nconst error = ref(null)      // 错误信息\nconst searchQuery = ref('')  // 筛选关键字\n\n// 获取筛选后的biomarker\nconst filterBiomarkers = async () =&gt; &#123;\n  isLoading.value = true\n  try &#123;\n    const response = await axios.get(`http://localhost:3000/biomarkers?name=$&#123;searchQuery.value&#125;`)\n    biomarkers.value = response.data\n  &#125; catch (err) &#123;\n    error.value = '筛选 biomarker 失败'\n  &#125; finally &#123;\n    isLoading.value = false\n  &#125;\n&#125;\n\n// 组件挂载时获取 biomarker 列表\nonMounted(async () =&gt; &#123;\n  isLoading.value = true\n  try &#123;\n    const response = await axios.get('http://localhost:3000/biomarkers')\n    biomarkers.value = response.data\n  &#125; catch (err) &#123;\n    error.value = '获取 biomarker 列表失败'\n  &#125; finally &#123;\n    isLoading.value = false\n  &#125;\n&#125;)\n&lt;/script&gt;\n</code></pre>\n<p>这样，你就可以根据用户的输入来筛选 biomarker 列表了。</p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<ol>\n<li><strong>安装 Axios</strong> 以发送 HTTP 请求。</li>\n<li><strong>在 Vue 组件中发送请求</strong>，通过  <code>onMounted</code>  生命周期钩子在组件加载时获取 biomarker 数据。</li>\n<li><strong>通过 Vue Router 实现路由跳转</strong>，让用户点击 biomarker 后可以跳转到详细信息页面。</li>\n<li><strong>添加筛选功能</strong>，让用户根据条件筛选 biomarker。</li>\n</ol>\n<p>通过这些步骤，前端已经可以与后端 API 交互，展示、筛选和查看 biomarker 的详细信息。</p>\n",
            "tags": [
                "Vue 3",
                "Element Plus",
                "MySQL"
            ]
        },
        {
            "id": "https://new.limina.top/2024/10/22/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BD%91%E7%AB%99-05/",
            "url": "https://new.limina.top/2024/10/22/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BD%91%E7%AB%99-05/",
            "title": "使用 Vue 3 + Element Plus 从头开始写一个数据库网站-05-API 的设计与实现",
            "date_published": "2024-10-22T02:02:45.000Z",
            "content_html": "<h1 id=\"使用-vue-3-element-plus-从头开始写一个数据库网站-05-api-的设计与实现\"><a class=\"anchor\" href=\"#使用-vue-3-element-plus-从头开始写一个数据库网站-05-api-的设计与实现\">#</a> 使用 Vue 3 + Element Plus 从头开始写一个数据库网站 - 05-API 的设计与实现</h1>\n<blockquote>\n<p>由于 PrismJS 尚不支持 Vue 的语法高亮，因此 Vue 代码块均先使用 HTML 的高亮</p>\n<p>2024-09-23</p>\n</blockquote>\n<h2 id=\"设计-api\"><a class=\"anchor\" href=\"#设计-api\">#</a> 设计 API</h2>\n<p>由于这是一个 Biomarker 数据库网站，所以应该具有的基础功能有：</p>\n<ol>\n<li>在页面上展示 Biomarker 列表</li>\n<li>点击某一 Biomarker 可以跳转详细信息页面</li>\n<li>可以根据条件筛选 Biomarker</li>\n</ol>\n<h2 id=\"实现-api\"><a class=\"anchor\" href=\"#实现-api\">#</a> 实现 API</h2>\n<h3 id=\"创建-biomarkersjs-路由文件\"><a class=\"anchor\" href=\"#创建-biomarkersjs-路由文件\">#</a> 创建  <code>biomarkers.js</code>  路由文件</h3>\n<p>在  <code>backend/routes/</code>  目录下为生物标志物的 API 创建一个路由文件  <code>biomarkers.js</code> ：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// routes/biomarkers.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> db <span class=\"token keyword\">from</span> <span class=\"token string\">'../db.js'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 引入数据库连接</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// GET /biomarkers - 获取所有 biomarker，支持筛选和分页</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> limit <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> <span class=\"token string\">'SELECT * FROM biomarkers WHERE 1=1'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        query <span class=\"token operator\">+=</span> <span class=\"token string\">' AND `Biomarker(abbr.)` LIKE ?'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        params<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">%</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">%</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        query <span class=\"token operator\">+=</span> <span class=\"token string\">' AND type = ?'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        params<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    query <span class=\"token operator\">+=</span> <span class=\"token string\">' LIMIT ? OFFSET ?'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    params<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>biomarkers<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>biomarkers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// GET /biomarkers/:id - 根据 ID 获取 biomarker 详情</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> id <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>biomarker<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT * FROM biomarkers WHERE id = ?'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>biomarker<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'Biomarker not found'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>biomarker<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">// GET /biomarkers/filters - 获取筛选条件</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/filters'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">const</span> queries <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">field</span><span class=\"token operator\">:</span> <span class=\"token string\">'Category'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span> <span class=\"token string\">'SELECT DISTINCT Category FROM biomarkers WHERE Category IS NOT NULL'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">field</span><span class=\"token operator\">:</span> <span class=\"token string\">'Location'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span> <span class=\"token string\">'SELECT DISTINCT Location FROM biomarkers WHERE Location IS NOT NULL'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">field</span><span class=\"token operator\">:</span> <span class=\"token string\">'Source'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span> <span class=\"token string\">'SELECT DISTINCT Source FROM biomarkers WHERE Source IS NOT NULL'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">field</span><span class=\"token operator\">:</span> <span class=\"token string\">'Application'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span> <span class=\"token string\">'SELECT DISTINCT Application FROM biomarkers WHERE Application IS NOT NULL'</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">const</span> filterResults <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            queries<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> field<span class=\"token punctuation\">,</span> query <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                            <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                        <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> results<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">row</span> <span class=\"token operator\">=></span> row<span class=\"token punctuation\">[</span>field<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> field<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token comment\">// 将查询结果整合到一个对象中</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">const</span> filters <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        filterResults<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> field<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            filters<span class=\"token punctuation\">[</span>field<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"在-appjs-中注册路由\"><a class=\"anchor\" href=\"#在-appjs-中注册路由\">#</a> 在  <code>app.js</code>  中注册路由</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// app.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> cors <span class=\"token keyword\">from</span> <span class=\"token string\">'cors'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 引入 CORS 中间件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> biomarkersRouter <span class=\"token keyword\">from</span> <span class=\"token string\">'./routes/biomarkers.js'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 使用 CORS 中间件，允许所有来源</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 解析 JSON 请求体</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 注册 biomarkers 路由</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/biomarkers'</span><span class=\"token punctuation\">,</span> biomarkersRouter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> app<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"编辑-binwww-文件\"><a class=\"anchor\" href=\"#编辑-binwww-文件\">#</a> 编辑  <code>bin/www</code>  文件</h3>\n<p>由于我们使用 ES6 语法， <code>bin/www</code>  文件也需要做一些修改：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// www</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> app <span class=\"token keyword\">from</span> <span class=\"token string\">'../app.js'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> debugModule <span class=\"token keyword\">from</span> <span class=\"token string\">'debug'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> http <span class=\"token keyword\">from</span> <span class=\"token string\">'http'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> debug <span class=\"token operator\">=</span> <span class=\"token function\">debugModule</span><span class=\"token punctuation\">(</span><span class=\"token string\">'backend:server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 设置端口</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token function\">normalizePort</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token string\">'3000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'port'</span><span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 创建 HTTP 服务器</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 监听指定的端口</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> onError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listening'</span><span class=\"token punctuation\">,</span> onListening<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> * Normalize a port into a number, string, or false.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">normalizePort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>port <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> port<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"35\"></td><td><pre> * Event listener for HTTP server \"error\" event.</pre></td></tr><tr><td data-num=\"36\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>syscall <span class=\"token operator\">!==</span> <span class=\"token string\">'listen'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">const</span> bind <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> port <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token operator\">?</span> <span class=\"token string\">'Pipe '</span> <span class=\"token operator\">+</span> port</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token operator\">:</span> <span class=\"token string\">'Port '</span> <span class=\"token operator\">+</span> port<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">'EACCES'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>bind <span class=\"token operator\">+</span> <span class=\"token string\">' requires elevated privileges'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">'EADDRINUSE'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>bind <span class=\"token operator\">+</span> <span class=\"token string\">' is already in use'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"61\"></td><td><pre> * Event listener for HTTP server \"listening\" event.</pre></td></tr><tr><td data-num=\"62\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">onListening</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">const</span> addr <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">const</span> bind <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> addr <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token operator\">?</span> <span class=\"token string\">'pipe '</span> <span class=\"token operator\">+</span> addr</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token operator\">:</span> <span class=\"token string\">'port '</span> <span class=\"token operator\">+</span> addr<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Listening on '</span> <span class=\"token operator\">+</span> bind<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">服务器正在运行在 http://localhost:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>addr<span class=\"token punctuation\">.</span>port<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"运行-express-服务器\"><a class=\"anchor\" href=\"#运行-express-服务器\">#</a> 运行 Express 服务器</h3>\n<p>进入  <code>backend</code>  目录使用以下命令可以运行服务器：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> start</pre></td></tr></table></figure><p>默认情况下，服务器会在  <code>http://localhost:3000</code>  运行。</p>\n",
            "tags": [
                "Vue 3",
                "Element Plus",
                "MySQL"
            ]
        },
        {
            "id": "https://new.limina.top/2024/09/26/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BD%91%E7%AB%99-04/",
            "url": "https://new.limina.top/2024/09/26/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BD%91%E7%AB%99-04/",
            "title": "使用 Vue 3 + Element Plus 从头开始写一个数据库网站-04-后端服务搭建准备",
            "date_published": "2024-09-26T07:36:45.000Z",
            "content_html": "<h1 id=\"使用-vue-3-element-plus-从头开始写一个数据库网站-04-后端服务搭建准备\"><a class=\"anchor\" href=\"#使用-vue-3-element-plus-从头开始写一个数据库网站-04-后端服务搭建准备\">#</a> 使用 Vue 3 + Element Plus 从头开始写一个数据库网站 - 04 - 后端服务搭建准备</h1>\n<blockquote>\n<p>由于 PrismJS 尚不支持 Vue 的语法高亮，因此 Vue 代码块均先使用 HTML 的高亮</p>\n<p>2024-09-23</p>\n</blockquote>\n<h2 id=\"搭建本地测试数据库\"><a class=\"anchor\" href=\"#搭建本地测试数据库\">#</a> 搭建本地测试数据库</h2>\n<h3 id=\"安装-mysql-并启动\"><a class=\"anchor\" href=\"#安装-mysql-并启动\">#</a> 安装 MySQL 并启动</h3>\n<p>下载 <a href=\"https://dev.mysql.com/downloads/mysql/\">MySQL</a>，以在本地搭建测试数据库。</p>\n<p>以 8.4.2 LTS 版本为例，使用 MSI Installer 进行安装对新手来说比较便捷。</p>\n<p>安装完成后，windows + R 输入 services.msc 打开服务，找到 MySQL84，右键启动</p>\n<p>如果在安装过程中选择了启动 MySQL 服务，那么这个服务应该已经在运行了，但当我们下次再启动 MySQL 时，仍需先启动 MySQL 服务，否则输入密码后会闪退</p>\n<h3 id=\"创建-mysql-数据库\"><a class=\"anchor\" href=\"#创建-mysql-数据库\">#</a> 创建 MySQL 数据库</h3>\n<p>按照以下步骤创建 MySQL 数据库和表：</p>\n<ol>\n<li>\n<p>打开 MySQL 命令行客户端（名为  <code>MySQL 8.4 Command Line Client</code> ）并登录（密码应该已经在安装过程中被设置）</p>\n</li>\n<li>\n<p>创建一个新的数据库：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> admarker_db<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>切换到新创建的数据库：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">USE</span> admarker_db<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"向数据库中添加数据\"><a class=\"anchor\" href=\"#向数据库中添加数据\">#</a> 向数据库中添加数据</h3>\n<p>如果数据比较少，可以手动添加</p>\n<ol>\n<li>\n<p>创建一个用于存储生物标志物信息的表：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> biomarkers <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ID <span class=\"token keyword\">INT</span> <span class=\"token keyword\">AUTO_INCREMENT</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Biomarker <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    PMID <span class=\"token keyword\">INT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Description <span class=\"token keyword\">TEXT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Application <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用  <code>INSERT INTO</code>  语句插入数据</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> biomarkers <span class=\"token punctuation\">(</span>Biomarker<span class=\"token punctuation\">,</span> PMID<span class=\"token punctuation\">,</span> Description<span class=\"token punctuation\">,</span> Application<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Biomarker1'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12345678</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'This is a description for Biomarker1.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cancer Diagnosis'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>如果数据比较多，可以使用数据库管理工具例如 phpMyAdmin（免费）、Navicat（付费）等来导入</p>\n<blockquote>\n<p>喜大普奔：2024 年 6 月 Navicat 推出了一款免费的产品 ——<a href=\"https://www.navicat.com.cn/download/navicat-premium-lite\">Navicat Premium Lite</a>。Navicat Premium Lite 是 Navicat 的精简版，拥有基本数据库操作所需的核心功能。</p>\n</blockquote>\n<h2 id=\"搭建后端服务\"><a class=\"anchor\" href=\"#搭建后端服务\">#</a> 搭建后端服务</h2>\n<p>在之前的教程中，我们已经了解了目录结构：</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ADDB/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>├── .vscode/                # 存放 VS Code 配置文件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>├── node_modules/           # 存放项目依赖包</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>├── public/                 # 存放静态资源，如 HTML、favicon</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>├── src/                    # 源代码目录</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>│   ├── assets/             # 存放静态资源，如图片、字体</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>│   ├── components/         # 存放可复用的 Vue 组件</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>│   ├── router/             # 存放 Vue Router 配置</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>│   ├── stores/             # 存放状态管理配置（Pinia）</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>│   ├── views/              # 存放不同页面的 Vue 组件</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>│   ├── App.vue             # 根组件</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>│   ├── main.js             # 应用入口文件</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>├── .eslintrc.cjs           # ESLint 配置文件</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>├── .gitignore              # Git 忽略文件列表</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>├── .prettierrc.json        # Prettier 配置文件</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>├── index.html              # 主 HTML 模板文件</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>├── jsconfig.json           # JavaScript 项目配置文件</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>├── package.json            # 项目配置文件，记录依赖及脚本</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>├── pnpm-lock.yaml          # pnpm 锁定文件，确保依赖版本一致</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>├── README.md               # 项目的自述文档</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>├── vite.config.js          # Vite 配置文件</pre></td></tr></table></figure><p>接下来我们使用 express-generator 生成后端项目骨架。</p>\n<p><code>express-generator</code>  可以快速创建一个基本的 Express 项目骨架，免去手动配置项目结构的麻烦。</p>\n<h3 id=\"全局安装-express-generator\"><a class=\"anchor\" href=\"#全局安装-express-generator\">#</a> 全局安装  <code>express-generator</code></h3>\n<p>使用 pnpm 全局安装  <code>express-generator</code> ：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-g</span> express-generator</pre></td></tr></table></figure><h3 id=\"使用-express-generator-创建项目\"><a class=\"anchor\" href=\"#使用-express-generator-创建项目\">#</a> 使用  <code>express-generator</code>  创建项目</h3>\n<p>后端项目可以根据你的需求放在与 Vue 3 项目根目录  <code>ADDB</code>  并列的层级，也可以放在  <code>ADDB</code>  下</p>\n<p>以放在  <code>ADDB</code>  下为例，在  <code>ADDB</code>  目录下，使用  <code>express-generator</code>  来创建后端项目：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> ADDB</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>express --no-view backend</pre></td></tr></table></figure><ul>\n<li><code>--no-view</code> ：该选项表示不使用任何模板引擎（如 Pug），仅生成基本的 API 项目。如果你打算为项目添加视图层，可以选择合适的模板引擎（如 Pug、EJS、Handlebars 等）。</li>\n</ul>\n<h3 id=\"安装依赖\"><a class=\"anchor\" href=\"#安装依赖\">#</a> 安装依赖</h3>\n<p>创建项目后，进入  <code>backend</code>  目录并安装依赖：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> backend</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">pnpm</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><h3 id=\"express-generator-生成的目录结构\"><a class=\"anchor\" href=\"#express-generator-生成的目录结构\">#</a>  <code>express-generator</code>  生成的目录结构</h3>\n<p>生成的目录结构如下：</p>\n<pre><code>backend/\n├── bin/                 # 存放启动脚本，如 www\n├── public/              # 存放静态资源\n├── routes/              # 路由目录\n├── app.js               # Express 应用入口文件\n├── package.json         # 项目依赖配置文件\n└── node_modules/        # 存放依赖包\n</code></pre>\n<p>生成的骨架代码已经包含基本的路由、静态资源、错误处理和日志等配置，可以根据需要进行扩展。</p>\n<h3 id=\"切换到-es-模块语法\"><a class=\"anchor\" href=\"#切换到-es-模块语法\">#</a> 切换到 ES 模块语法</h3>\n<p>现代的 Node.js 项目，尤其是与 Vite 或其他现代打包工具一起使用时，通常使用的是 ES 模块规范 (ESM)，例如 Vue 3 使用 ES6 语法。</p>\n<p>与之相对的是 CommonJS 模块系统，这是 Node.js 的传统模块系统，在 Node.js 中默认使用。</p>\n<p>为保持一致性，我们在  <code>package.json</code>  文件中加一行来切换到 ES 模块语法</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"配置数据库连接\"><a class=\"anchor\" href=\"#配置数据库连接\">#</a> 配置数据库连接</h2>\n<p>在  <code>backend</code>  项目中，通常在  <code>app.js</code>  中配置数据库连接，或者我们可以提取到一个独立的文件中。</p>\n<p>为了项目结构清晰，我们可以在  <code>backend</code>  目录下创建一个  <code>db.js</code>  文件来管理数据库连接。</p>\n<p>在  <code>backend</code>  目录下创建  <code>db.js</code>  文件并写入：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// db.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> mysql <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mysql2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 创建数据库连接池</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> pool <span class=\"token operator\">=</span> mysql<span class=\"token punctuation\">.</span><span class=\"token function\">createPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token literal-property property\">database</span><span class=\"token operator\">:</span> <span class=\"token string\">'database'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token literal-property property\">waitForConnections</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token literal-property property\">connectionLimit</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token literal-property property\">queueLimit</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 导出查询方法</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> pool<span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> db<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里我们使用了连接池，以提高数据库查询的性能。</p>\n",
            "tags": [
                "Vue 3",
                "MySQL"
            ]
        },
        {
            "id": "https://new.limina.top/2021/02/08/%E4%BB%8E%E6%9C%AC%E5%9C%B0%E8%BF%81%E7%A7%BB%E7%BD%91%E7%AB%99%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/",
            "url": "https://new.limina.top/2021/02/08/%E4%BB%8E%E6%9C%AC%E5%9C%B0%E8%BF%81%E7%A7%BB%E7%BD%91%E7%AB%99%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/",
            "title": "从本地迁移网站到服务器",
            "date_published": "2021-02-07T17:55:34.000Z",
            "content_html": "<blockquote>\n<p>本教程仅针对 Hostinger</p>\n</blockquote>\n<h2 id=\"进入数据库管理页面\"><a class=\"anchor\" href=\"#进入数据库管理页面\">#</a> 进入数据库管理页面</h2>\n<p>在宝塔面板数据库标签页面点击 phpMyAdmin</p>\n<p><img loading=\"lazy\" data-src=\"https://img.limina.top/blog/%E8%BF%9B%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E9%A1%B5%E9%9D%A2-2021-08-21.png\" alt=\"进入数据库管理页面-2021-08-21\" /></p>\n<h2 id=\"导出数据库文件\"><a class=\"anchor\" href=\"#导出数据库文件\">#</a> 导出数据库文件</h2>\n<p>在页面左侧找到要导出数据的本地数据库，然后全选导出</p>\n<p><img loading=\"lazy\" data-src=\"https://img.limina.top/blog/%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E4%BB%B6-2021-08-21.png\" alt=\"导出数据库文件-2021-08-21\" /></p>\n<p>为了避免服务器 myphp 版本跟本机的不一致而导致的问题，在导出方式选择  <code>自定义 - 显示所有可用的选项</code> ，然后下拉，在【格式特定选项】中的  <code>最大程度兼容数据库系统或旧版本的MySQL服务器</code> 选项中，选择  <code>MYSQL40</code> （在服务器中还原数据库的时也要选择该选项）</p>\n<p><img loading=\"lazy\" data-src=\"https://img.limina.top/blog/%E6%A0%BC%E5%BC%8F%E7%89%B9%E5%AE%9A%E9%80%89%E9%A1%B9-2021-08-21.png\" alt=\"格式特定选项-2021-08-21\" /></p>\n<p>然后点击  <code>执行</code></p>\n<h2 id=\"修改数据库\"><a class=\"anchor\" href=\"#修改数据库\">#</a> 修改数据库</h2>\n<p>数据库中记录的是本地 localhost 信息，要上线到服务器就要改成我的域名才能访问。我们可以直接改文件。复制一份 sql 文件，把 localhost 替换成我的域名，全部替换完毕就保存。</p>\n<p><img loading=\"lazy\" data-src=\"https://img.limina.top/blog/%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E4%BB%B61-2021-08-21.png\" alt=\"修改数据库文件1-2021-08-21\" /></p>\n<p>创建好后点击  <code>Enter phpMyAdmin</code>  进入数据库管理面板</p>\n<p>导入成功后回到 Hostinger 面板在左侧找到  <code>Files -&gt; File Manager</code> ，将所有网站文件打包上传</p>\n<p>修改 WordPress 配置文件并保存</p>\n<h2 id=\"还原数据库\"><a class=\"anchor\" href=\"#还原数据库\">#</a> 还原数据库</h2>\n<p>新建一个新的数据库</p>\n<p><img loading=\"lazy\" data-src=\"https://img.limina.top/blog/%E6%96%B0%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93-2021-08-21.png\" alt=\"新建数据库-2021-08-21\" /></p>\n<p>还原数据库</p>\n<p><img loading=\"lazy\" data-src=\"https://img.limina.top/blog/%E8%BF%98%E5%8E%9F%E6%95%B0%E6%8D%AE%E5%BA%93-2021-08-21.png\" alt=\"还原数据库-2021-08-21\" /></p>\n<p>修改 WordPress 的配置文件</p>\n<p><img loading=\"lazy\" data-src=\"https://img.limina.top/blog/%E4%BF%AE%E6%94%B9WordPress%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-2021-08-21.png\" alt=\"修改WordPress配置文件-2021-08-21\" /></p>\n<p>修改数据库文件，将所有测试域名换成新的域名</p>\n<p><img loading=\"lazy\" data-src=\"https://img.limina.top/blog/%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E4%BB%B62-2021-08-21.png\" alt=\"修改数据库文件2-2021-08-21\" /> <img loading=\"lazy\" data-src=\"https://img.limina.top/blog/%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E4%BB%B63-2021-08-21.png\" alt=\"修改数据库文件3-2021-08-21\" /></p>\n",
            "tags": [
                "建站",
                "MySQL"
            ]
        }
    ]
}