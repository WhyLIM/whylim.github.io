{
    "version": "https://jsonfeed.org/version/1",
    "title": "Being on sea, sail; being on land, settle. • All posts by \"rest api\" tag",
    "description": "",
    "home_page_url": "https://new.limina.top",
    "items": [
        {
            "id": "https://new.limina.top/2024/08/29/REST%20API%20%E4%B8%8E%20GraphQL%20API%20%E7%9A%84%E6%AF%94%E8%BE%83/",
            "url": "https://new.limina.top/2024/08/29/REST%20API%20%E4%B8%8E%20GraphQL%20API%20%E7%9A%84%E6%AF%94%E8%BE%83/",
            "title": "REST API 和 GraphQL API 的联系与区别",
            "date_published": "2024-08-29T10:36:55.000Z",
            "content_html": "<h1 id=\"rest-api-和-graphql-api-的联系与区别\"><a class=\"anchor\" href=\"#rest-api-和-graphql-api-的联系与区别\">#</a> REST API 和 GraphQL API 的联系与区别</h1>\n<p>API（Application Programming Interface，应用编程接口），通俗点说，就是不同软件之间的交流工具。它让我们可以从服务器获取数据或者把数据发送给服务器。目前常用的两种常见 API 是 REST API 和 GraphQL API。</p>\n<h2 id=\"rest-api\"><a class=\"anchor\" href=\"#rest-api\">#</a> REST API</h2>\n<p>REST API （Representational State Transfer API）是目前用得最多的一种 API 类型，它的原理很简单：通过 URL 来获取资源。</p>\n<h3 id=\"rest-api-怎么工作\"><a class=\"anchor\" href=\"#rest-api-怎么工作\">#</a> REST API 怎么工作</h3>\n<p>我们可以把 REST API 想象成一个餐厅的菜单。你点什么菜（访问什么 URL），厨房（服务器）就会给你端上来对应的菜品（数据）。比如，你在浏览一个电商网站时，访问  <code>/products</code>  这个 URL，你可能就会看到所有的商品列表；访问  <code>/products/123</code> ，你就会看到编号为 123 的商品详情。</p>\n<h3 id=\"rest-api-的优缺点\"><a class=\"anchor\" href=\"#rest-api-的优缺点\">#</a> REST API 的优缺点</h3>\n<p><strong>优点：</strong></p>\n<ul>\n<li><strong>容易理解</strong>：因为它是基于 HTTP 协议的，所以开发者几乎不需要额外学习就能上手。</li>\n<li><strong>普遍使用</strong>：大部分网站和应用都是用 REST API 来获取数据的，比如 Twitter、Facebook 等。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li><strong>可能获取太多或太少数据</strong>：举个例子，你只想知道某个商品的价格，但可能服务器会把这个商品的全部信息都给你，导致你获取了很多不需要的数据。反过来，有时候你想要多个商品的信息，但 REST API 可能让你得分几次请求才能拿到。</li>\n</ul>\n<h2 id=\"graphql-api\"><a class=\"anchor\" href=\"#graphql-api\">#</a> GraphQL API</h2>\n<p>GraphQL 是 Facebook 开发的一种新型 API，它解决了 REST API 的一些不足之处。与其说它是一种 API，不如说它是一个 “点菜系统”，你可以告诉服务器你要什么样的数据，服务器就只会给你这些。</p>\n<h3 id=\"graphql-api-怎么工作\"><a class=\"anchor\" href=\"#graphql-api-怎么工作\">#</a> GraphQL API 怎么工作</h3>\n<p>想象一下，你去餐厅点菜，你告诉服务员：“我只要牛排，不要配菜。” 服务员就只给你牛排。同样的，在 GraphQL 中，你可以向服务器请求：“我只要商品的名字和价格，不要其他信息。” 服务器就只会返回这些数据。</p>\n<p><strong>举个例子</strong>：<br />\n假设你想知道某个基因的信息。在 REST API 中，你可能需要多次请求不同的 URL，来分别获取基因的基本信息、遗传信息和其他相关数据。而在 GraphQL 中，你只需要一个请求，服务器会根据你的要求，返回所有你需要的数据，既方便又高效。</p>\n<h3 id=\"graphql-api-的优缺点\"><a class=\"anchor\" href=\"#graphql-api-的优缺点\">#</a> GraphQL API 的优缺点</h3>\n<p><strong>优点：</strong></p>\n<ul>\n<li><strong>精确获取数据</strong>：你可以指定只要什么数据，避免不必要的流量消耗。</li>\n<li><strong>减少请求次数</strong>：你可以在一个请求中获取多个资源的数据，这对复杂的应用来说非常有用。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li><strong>学习成本较高</strong>：对于初学者来说，理解 GraphQL 的查询语言和概念可能有点挑战。</li>\n<li><strong>实现复杂</strong>：服务器端需要支持复杂的查询，这可能会增加开发和维护的难度。</li>\n</ul>\n<p>非常抱歉误解了你的意思，下面我将以代码举例来介绍 REST API 和 GraphQL API 的不同。</p>\n<h2 id=\"rest-api-与-graphql-api-的代码示例比较\"><a class=\"anchor\" href=\"#rest-api-与-graphql-api-的代码示例比较\">#</a> REST API 与 GraphQL API 的代码示例比较</h2>\n<h3 id=\"rest-api-示例\"><a class=\"anchor\" href=\"#rest-api-示例\">#</a> REST API 示例</h3>\n<p>假设我们有一个电商网站，需要获取商品的列表和商品的详细信息。我们可以使用 REST API 来实现这一需求。</p>\n<p><strong>获取商品列表的 REST API 请求：</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 获取商品列表</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.example.com/products'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 打印返回的商品列表</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>获取特定商品详情的 REST API 请求：</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 获取 ID 为 123 的商品详情</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>product_id <span class=\"token operator\">=</span> <span class=\"token number\">123</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'https://api.example.com/products/</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>product_id<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 打印商品的详细信息</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在这个 REST API 的例子中， <code>/products</code>  用于获取所有商品的列表，而  <code>/products/123</code>  用于获取某个特定商品的详情。每次请求只能获取特定资源的数据。</p>\n<h3 id=\"graphql-api-示例\"><a class=\"anchor\" href=\"#graphql-api-示例\">#</a> GraphQL API 示例</h3>\n<p>同样的需求，我们使用 GraphQL API 来实现。我们可以在一个请求中获取商品列表和每个商品的详细信息，并且只获取我们感兴趣的字段。</p>\n<p><strong>获取商品信息的 GraphQL API 请求：</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># GraphQL 查询字符串</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>query <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  products &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    id</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    name</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    price</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    description</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 发送 POST 请求</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.example.com/graphql'</span><span class=\"token punctuation\">,</span> json<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">:</span> query<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 打印返回的商品信息</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>查询特定商品的详细信息：</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># GraphQL 查询字符串，带有变量的查询</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>query <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>query getProduct($id: ID!) &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  product(id: $id) &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    id</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    name</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    price</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    description</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    stock</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 定义查询的变量</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>variables <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 发送 POST 请求，包含查询和变量</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.example.com/graphql'</span><span class=\"token punctuation\">,</span> json<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">:</span> query<span class=\"token punctuation\">,</span> <span class=\"token string\">'variables'</span><span class=\"token punctuation\">:</span> variables<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 打印特定商品的详细信息</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在 GraphQL API 的例子中， <code>products</code>  查询可以获取商品的所有信息，并且只返回我们指定的字段（例如  <code>id</code> 、 <code>name</code> 、 <code>price</code>  和  <code>description</code> ）。而在查询特定商品详情时，我们通过变量  <code>$id</code>  传递商品 ID，获取该商品的详细信息。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p><strong>REST API</strong>：</p>\n<ul>\n<li>每个资源（例如商品列表、商品详情）有自己独立的 URL。</li>\n<li>获取数据时可能会获取到不需要的字段（过度获取），或者需要多次请求才能获取所有需要的数据（不足获取）。</li>\n</ul>\n<p><strong>GraphQL API</strong>：</p>\n<ul>\n<li>只有一个端点，但可以通过灵活的查询语句获取不同的数据。</li>\n<li>可以精确获取所需的字段，避免过度获取或不足获取的情况。</li>\n<li>支持在一个请求中获取多个资源的数据。</li>\n</ul>\n",
            "tags": [
                "API",
                "REST API",
                "GraphQL API"
            ]
        }
    ]
}