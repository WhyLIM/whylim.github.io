{
    "version": "https://jsonfeed.org/version/1",
    "title": "Being on sea, sail; being on land, settle. • All posts by \"element plus\" category",
    "description": "",
    "home_page_url": "https://new.limina.top",
    "items": [
        {
            "id": "https://new.limina.top/2024/09/22/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BD%91%E7%AB%99-03/",
            "url": "https://new.limina.top/2024/09/22/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BD%91%E7%AB%99-03/",
            "title": "使用 Vue 3 + Element Plus 从头开始写一个数据库网站-03",
            "date_published": "2024-09-22T07:33:06.000Z",
            "content_html": "<h1 id=\"使用-vue-3-element-plus-从头开始写一个数据库网站-03\"><a class=\"anchor\" href=\"#使用-vue-3-element-plus-从头开始写一个数据库网站-03\">#</a> 使用 Vue 3 + Element Plus 从头开始写一个数据库网站 - 03</h1>\n<p>由于大家可能初学 Vue 3，为了先熟悉 Vue 3 和前端开发的流程，我们先来编写一些基本的前端页面。</p>\n<p>在之前的教程中，我们已经了解了目录结构：</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ADDB/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>├── .vscode/                # 存放 VS Code 配置文件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>├── node_modules/           # 存放项目依赖包</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>├── public/                 # 存放静态资源，如 HTML、favicon</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>├── src/                    # 源代码目录</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>│   ├── assets/             # 存放静态资源，如图片、字体</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>│   ├── components/         # 存放可复用的 Vue 组件</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>│   ├── router/             # 存放 Vue Router 配置</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>│   ├── stores/             # 存放状态管理配置（Pinia）</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>│   ├── views/              # 存放不同页面的 Vue 组件</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>│   ├── App.vue             # 根组件</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>│   ├── main.js             # 应用入口文件</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>├── .eslintrc.cjs           # ESLint 配置文件</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>├── .gitignore              # Git 忽略文件列表</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>├── .prettierrc.json        # Prettier 配置文件</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>├── index.html              # 主 HTML 模板文件</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>├── jsconfig.json           # JavaScript 项目配置文件</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>├── package.json            # 项目配置文件，记录依赖及脚本</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>├── pnpm-lock.yaml          # pnpm 锁定文件，确保依赖版本一致</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>├── README.md               # 项目的自述文档</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>├── vite.config.js          # Vite 配置文件</pre></td></tr></table></figure><p>在  <code>assets/</code>  目录下有一个  <code>base.css</code>  文件和一个  <code>main.css</code>  文件：</p>\n<ul>\n<li>\n<p><code>base.css</code> ：这是一个基础样式文件，通常用于定义一些基础样式（重置样式）。这些基础样式可以帮助开发者消除不同浏览器之间的默认样式差异，确保应用在不同的浏览器中外观一致。</p>\n</li>\n<li>\n<p><code>main.css</code> ：这是一个全局样式文件，它在  <code>src/main.js</code>  文件中被引入，作为全局样式，我们可以先把它清空。</p>\n</li>\n</ul>\n<h2 id=\"认识-vue-文件\"><a class=\"anchor\" href=\"#认识-vue-文件\">#</a> 认识  <code>.vue</code>  文件</h2>\n<p>在 Vue 3 中，一个  <code>.vue</code>  文件是 Vue 组件的单文件组件（SFC，Single File Component），这种文件结构能够将模板、逻辑和样式集中在一个文件中，便于维护和组织。典型的  <code>.vue</code>  文件由三个核心部分组成，分别是  <code>&lt;template&gt;</code> 、 <code>&lt;script&gt;</code>  和  <code>&lt;style&gt;</code> 。</p>\n<h3 id=\"vue-文件的基本结构\"><a class=\"anchor\" href=\"#vue-文件的基本结构\">#</a> Vue 文件的基本结构</h3>\n<p>一个最简单的 Vue 组件文件结构如下：</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 模板部分 --&gt;\n  &lt;div&gt;\n    &lt;h1&gt;&#123;&#123; message &#125;&#125;&lt;/h1&gt;\n    &lt;button @click=&quot;handleClick&quot;&gt;点击我&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  data() &#123;\n    return &#123;\n      message: 'Hello, Vue 3!',\n    &#125;;\n  &#125;,\n  methods: &#123;\n    handleClick() &#123;\n      this.message = '你点击了按钮！';\n    &#125;,\n  &#125;,\n&#125;;\n&lt;/script&gt;\n\n&lt;style&gt;\n/* 样式部分 */\ndiv &#123;\n  text-align: center;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<h3 id=\"template-部分\"><a class=\"anchor\" href=\"#template-部分\">#</a>  <code>&lt;template&gt;</code>  部分</h3>\n<ul>\n<li>这是组件的<strong>模板部分</strong>，定义了组件的 HTML 结构和 Vue 指令。</li>\n<li>它是一个 HTML 代码块，用于描述组件的界面。</li>\n<li>在  <code>&lt;template&gt;</code>  中，Vue 的特性如数据绑定 ( <code>&#123;&#123; &#125;&#125;</code> ) 和事件绑定 ( <code>@事件</code> ) 被使用。</li>\n<li>所有你想要在浏览器中展示的内容都会写在这个部分。</li>\n</ul>\n<h3 id=\"script-部分\"><a class=\"anchor\" href=\"#script-部分\">#</a>  <code>&lt;script&gt;</code>  部分</h3>\n<ul>\n<li><strong>逻辑部分</strong>，即 JavaScript 代码所在的地方，控制组件的状态和行为。</li>\n<li>这里定义了组件的<strong>状态</strong>（如  <code>data</code> ）、<strong>生命周期钩子</strong>、<strong>计算属性</strong>、<strong>方法</strong>等。</li>\n<li>使用 ES6 语法编写，在 Vue 3 中可以选择使用标准的 <code>组合式 API</code> （Composition API）写法或者 <code>选项式 API</code> （Options API）写法。上面例子用的是选项式 API。</li>\n</ul>\n<h4 id=\"更建议使用的组合式-api\"><a class=\"anchor\" href=\"#更建议使用的组合式-api\">#</a> 更建议使用的组合式 API</h4>\n<pre><code class=\"language-vue\">&lt;script setup&gt;\nimport &#123; ref &#125; from 'vue';\n\nconst message = ref('Hello, Vue 3!');\n\nfunction handleClick() &#123;\n  message.value = '你点击了按钮！';\n&#125;\n&lt;/script&gt;\n</code></pre>\n<ul>\n<li><code>setup</code>  函数是 Vue 3 中的一个新特性，允许你更灵活地组合逻辑。</li>\n</ul>\n<h3 id=\"style-部分\"><a class=\"anchor\" href=\"#style-部分\">#</a>  <code>&lt;style&gt;</code>  部分</h3>\n<ul>\n<li><strong>样式部分</strong>，用于定义组件的 CSS 样式。</li>\n<li>可以使用常规的 CSS，也可以使用预处理器如 Sass 或 Less。</li>\n</ul>\n<h4 id=\"scoped-样式\"><a class=\"anchor\" href=\"#scoped-样式\">#</a>  <code>scoped</code>  样式</h4>\n<p>可以通过添加  <code>scoped</code>  属性使样式只作用于当前组件，避免样式冲突，这也是建议的写法。例如：</p>\n<pre><code class=\"language-vue\">&lt;style scoped&gt;\nh1 &#123;\n  color: blue;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<h3 id=\"可选部分\"><a class=\"anchor\" href=\"#可选部分\">#</a> 可选部分</h3>\n<ul>\n<li><code>&lt;script lang=&quot;ts&quot;&gt;</code> : 使用 TypeScript 代替 JavaScript。</li>\n</ul>\n<h2 id=\"首页设计\"><a class=\"anchor\" href=\"#首页设计\">#</a> 首页设计</h2>\n<p>现在我们来模仿 pubchem 的首页样式：<a href=\"https://pubchem.ncbi.nlm.nih.gov/%EF%BC%8C%E7%BC%96%E5%86%99%E6%88%91%E4%BB%AC%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E9%A6%96%E9%A1%B5\">https://pubchem.ncbi.nlm.nih.gov/，编写我们数据库的首页</a></p>\n<p>可以看到，这个页面设计如下：</p>\n<ol>\n<li>最顶部是导航栏，由数据库 logo + 导航菜单组成</li>\n<li>导航栏下方是背景图，背景图中央是一个大标题 + 小标题 + 搜索框，用来搜索数据库中的 biomarker</li>\n<li>背景图下方是数据统计，这里可以使用 element-plus 的 Statistic 统计组件</li>\n<li>数据统计下方是数据库的简介</li>\n<li>简介下方是 footer</li>\n</ol>\n",
            "tags": [
                "Vue 3",
                "Element Plus"
            ]
        },
        {
            "id": "https://new.limina.top/2024/09/22/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BD%91%E7%AB%99-02/",
            "url": "https://new.limina.top/2024/09/22/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BD%91%E7%AB%99-02/",
            "title": "使用 Vue 3 + Element Plus 从头开始写一个数据库网站-02",
            "date_published": "2024-09-22T05:11:55.000Z",
            "content_html": "<h2 id=\"项目初始化与开发环境设置\"><a class=\"anchor\" href=\"#项目初始化与开发环境设置\">#</a> 项目初始化与开发环境设置</h2>\n<h3 id=\"创建前端项目\"><a class=\"anchor\" href=\"#创建前端项目\">#</a> 创建前端项目</h3>\n<h4 id=\"安装-nodejs-和-pnpm\"><a class=\"anchor\" href=\"#安装-nodejs-和-pnpm\">#</a> 安装 Node.js 和 pnpm</h4>\n<ul>\n<li>\n<p>确保你已经安装了 <a href=\"https://nodejs.org/\">Node.js</a>，建议安装最新的 LTS 版本。</p>\n</li>\n<li>\n<p>安装 pnpm，打开终端并运行以下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> <span class=\"token function\">pnpm</span></pre></td></tr></table></figure><p>pnpm 是一个快速且高效的包管理工具，相较于 npm 和 yarn，pnpm 具有更好的依赖管理效率。</p>\n</li>\n</ul>\n<h4 id=\"使用-pnpm-初始化-vue-3-项目\"><a class=\"anchor\" href=\"#使用-pnpm-初始化-vue-3-项目\">#</a> 使用 pnpm 初始化 Vue 3 项目</h4>\n<p>打开终端，使用以下命令创建新的 Vue 3 项目：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> create vue@latest</pre></td></tr></table></figure><p>在安装过程中，选择 Vue 3 作为框架。pnpm 会自动为您安装所需的依赖项。</p>\n<p>你会被问到一些问题，可以按如下方式选择：</p>\n<pre><code>√ 请输入项目名称： ... ADDB\n√ 请输入包名称： ... addb\n√ 是否使用 TypeScript 语法？ ... 否\n√ 是否启用 JSX 支持？ ... 否\n√ 是否引入 Vue Router 进行单页面应用开发？ ... 是\n√ 是否引入 Pinia 用于状态管理？ ... 是\n√ 是否引入 Vitest 用于单元测试？ ... 否\n√ 是否要引入一款端到端（End to End）测试工具？ » 不需要\n√ 是否引入 ESLint 用于代码质量检测？ ... 是\n√ 是否引入 Prettier 用于代码格式化？ ... 是\n√ 是否引入 Vue DevTools 7 扩展用于调试? (试验阶段) ... 否\n</code></pre>\n<p>完成之后，终端会显示：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>项目初始化完成，可执行以下命令：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token builtin class-name\">cd</span> ADDB</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">pnpm</span> <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">pnpm</span> <span class=\"token function\">format</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">pnpm</span> dev</pre></td></tr></table></figure><p>同时 Vue CLI 将会自动生成一个项目骨架：</p>\n<pre><code>ADDB/\n├── .vscode/\n├── node_modules/\n├── public/\n├── src/\n│   ├── assets/\n│   ├── components/\n│   ├── router/\n│   ├── stores/\n│   ├── views/\n│   ├── App.vue\n│   ├── main.js\n├── .eslintrc.cjs\n├── .gitignore\n├── .prettierrc.json\n├── index.html\n├── jsconfig.json\n├── package.json\n├── pnpm-lock.yaml\n├── README.md\n├── vite.config.js\n</code></pre>\n<p>现在我们来了解一下目录结构：</p>\n<p><strong>ADDB/：根目录</strong></p>\n<ul>\n<li>\n<p><strong>.vscode/</strong>: 存放 VS Code 编辑器的配置文件，如调试配置、扩展设置等。这个目录通常包含  <code>.vscode/settings.json</code> 、 <code>.vscode/launch.json</code>  等文件。</p>\n</li>\n<li>\n<p><strong>node_modules/</strong>: 这个目录存放了通过  <code>pnpm</code>  安装的所有依赖包。一般情况下，这个目录包含项目运行所需的第三方库。</p>\n</li>\n<li>\n<p><strong>public/</strong>: 这个目录用于存放静态资源，如  <code>index.html</code> 、 <code>favicon.ico</code>  等。此目录中的文件不会被 Webpack 等工具处理，会直接在打包时复制到输出目录。</p>\n</li>\n<li>\n<p><strong>src/</strong>: 这是你项目的源代码目录，包含了应用的主要逻辑和视图。里面有几个子目录：</p>\n<ul>\n<li><strong>assets/</strong>: 这个目录通常用于存放静态资源，如图片、字体等，这些资源会通过 Webpack 打包。</li>\n<li><strong>components/</strong>: 这里存放了 Vue 组件。这些组件通常是页面的一部分，可以在不同的页面中复用。</li>\n<li><strong>router/</strong>: 存放 Vue Router 的配置文件。 <code>index.js</code>  文件通常包含了应用的路由定义。</li>\n<li><strong>stores/</strong>: 存放用于状态管理的文件。因为你使用了 Pinia，所以这里应该有状态管理相关的配置。</li>\n<li><strong>views/</strong>: 这里存放的是 Vue 页面组件，通常对应应用的不同页面。比如你之前创建的  <code>Home.vue</code>  页面组件就应该放在这里。</li>\n</ul>\n</li>\n<li>\n<p><strong>App.vue</strong>: 这是整个 Vue 应用的根组件。所有页面都会通过  <code>App.vue</code>  组件来渲染。</p>\n</li>\n<li>\n<p><strong>main.js</strong>: 这是 Vue 应用的入口文件，用于创建 Vue 实例并挂载到 DOM 上。它通常会导入  <code>App.vue</code>  和  <code>router/index.js</code> ，然后启动整个应用。</p>\n</li>\n<li>\n<p><strong>.eslintrc.cjs</strong>: 这个文件是 ESLint 的配置文件，用于配置代码风格检查规则。</p>\n</li>\n<li>\n<p><strong>.gitignore</strong>: 这个文件指定了哪些文件或目录不应该被 Git 版本控制系统跟踪，比如  <code>node_modules/</code> 。</p>\n</li>\n<li>\n<p><strong>.prettierrc.json</strong>: 这个文件是 Prettier 的配置文件，用于代码格式化。你可以在这里配置代码格式的规则，比如缩进、换行等。</p>\n</li>\n<li>\n<p><strong>index.html</strong>: 这是 Vue 应用的主 HTML 模板文件，应用的所有内容都会被注入到这个文件中。</p>\n</li>\n<li>\n<p><strong>jsconfig.json</strong>: 这个文件是 JavaScript 项目的配置文件，通常用于配置 VS Code 的智能提示、模块解析路径等。</p>\n</li>\n<li>\n<p><strong>package.json</strong>: 这是项目的配置文件，记录了项目的基本信息、依赖项、脚本命令等。</p>\n</li>\n<li>\n<p><strong>pnpm-lock.yaml</strong>: 这是  <code>pnpm</code>  的锁定文件，记录了所有安装的依赖项及其版本，确保团队成员之间安装的依赖版本一致。</p>\n</li>\n<li>\n<p><strong><a href=\"http://README.md\">README.md</a></strong>: 这个文件通常用于项目的自述文档，描述项目的用途、安装步骤、使用方法等。</p>\n</li>\n<li>\n<p><strong>vite.config.js</strong>: 这是 Vite 的配置文件，用于配置 Vite 构建工具的相关选项，比如插件、代理等。</p>\n</li>\n</ul>\n<h4 id=\"安装和配置-element-plus\"><a class=\"anchor\" href=\"#安装和配置-element-plus\">#</a> 安装和配置 Element Plus</h4>\n<p>进入项目目录后，使用 pnpm 安装 Element Plus：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> ADDB</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> element-plus</pre></td></tr></table></figure><p>接着在  <code>src/main.js</code>  文件的对应位置中添加以下语句以引入 Element Plus：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> ElementPlus <span class=\"token keyword\">from</span> <span class=\"token string\">'element-plus'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'element-plus/dist/index.css'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>ElementPlus<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"后端项目设置\"><a class=\"anchor\" href=\"#后端项目设置\">#</a> 后端项目设置</h3>\n<h4 id=\"使用-express-生成后端项目骨架\"><a class=\"anchor\" href=\"#使用-express-生成后端项目骨架\">#</a> 使用 Express 生成后端项目骨架</h4>\n<p>后端项目可以根据你的需求放在与 Vue 3 项目根目录  <code>ADDB</code>  并列的层级，也可以放在  <code>ADDB</code>  下</p>\n<p>以放在  <code>ADDB</code>  下为例：</p>\n<p>打开新的终端窗口，在项目根目录  <code>ADDB</code>  下创建一个  <code>server</code>  目录用于后端项目，并进入该目录：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> server</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> server</pre></td></tr></table></figure><p>如果你使用的是 PowerShell， <code>mkdir</code>  命令有可能会报错，可以尝试以下命令：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">New-Item</span> <span class=\"token operator\">-</span>ItemType Directory <span class=\"token operator\">-</span>Path server</pre></td></tr></table></figure><p>初始化 Node.js 项目并安装 Express：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> init <span class=\"token parameter variable\">-y</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> express</pre></td></tr></table></figure><p>创建一个  <code>src/index.js</code>  文件，并设置基本的 Express 服务器</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 解析 JSON 请求体</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">服务器正运行在 http://localhost:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"设置与-mysql-数据库的连接\"><a class=\"anchor\" href=\"#设置与-mysql-数据库的连接\">#</a> 设置与 MySQL 数据库的连接</h4>\n<p>安装 MySQL 驱动：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> mysql2</pre></td></tr></table></figure><p>在  <code>src/index.js</code>  中添加数据库连接代码：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> mysql <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mysql2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> mysql<span class=\"token punctuation\">.</span><span class=\"token function\">createConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token string\">'your_username'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'your_password'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token literal-property property\">database</span><span class=\"token operator\">:</span> <span class=\"token string\">'your_database'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>db<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数据库连接成功。'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>请确保将  <code>your_username</code> 、 <code>your_password</code>  和  <code>your_database</code>  替换为实际的 MySQL 配置。</p>\n<h4 id=\"启动服务器\"><a class=\"anchor\" href=\"#启动服务器\">#</a> 启动服务器</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">node</span> index.js</pre></td></tr></table></figure><p>如果一切顺利，你应该会在终端中看到 &quot; 服务器正在运行在 <a href=\"http://localhost:3000\">http://localhost:3000</a>&quot; 的信息。</p>\n<p>到这里，我们已经完成了项目初始化、前端配置和后端服务的基础设置。接下来我们将设计和实现 API。</p>\n<h3 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h3>\n<h4 id=\"项目依赖安装与管理\"><a class=\"anchor\" href=\"#项目依赖安装与管理\">#</a> 项目依赖安装与管理</h4>\n<p>使用 pnpm 可以方便地安装、更新和移除项目依赖。以下是常用命令：</p>\n<ul>\n<li>安装依赖： <code>pnpm add package-name</code></li>\n<li>更新依赖： <code>pnpm update package-name</code></li>\n<li>移除依赖： <code>pnpm remove package-name</code></li>\n</ul>\n<h4 id=\"vs-code-插件推荐和配置\"><a class=\"anchor\" href=\"#vs-code-插件推荐和配置\">#</a> VS Code 插件推荐和配置</h4>\n<ul>\n<li><strong>Vue - Official</strong>：提供 Vue 3 的语法高亮和智能提示。</li>\n<li><strong>CodeGeeX</strong>：智谱 AI 研发的基于大模型的智能编程助手。</li>\n</ul>\n",
            "tags": [
                "Vue 3",
                "Element Plus"
            ]
        },
        {
            "id": "https://new.limina.top/2024/09/22/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BD%91%E7%AB%99-01/",
            "url": "https://new.limina.top/2024/09/22/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BD%91%E7%AB%99-01/",
            "title": "使用 Vue 3 + Element Plus 从头开始写一个数据库网站-01",
            "date_published": "2024-09-22T05:11:55.000Z",
            "content_html": "<h2 id=\"项目介绍\"><a class=\"anchor\" href=\"#项目介绍\">#</a> 项目介绍</h2>\n<h3 id=\"项目背景\"><a class=\"anchor\" href=\"#项目背景\">#</a> 项目背景</h3>\n<p>阿尔兹海默症（Alzheimer’s disease）是一种影响记忆和认知功能的神经退行性疾病，随着全球老龄化的加剧，其发病率逐年上升。为了支持科学研究与公众教育，开发一个专门的数据库网站显得尤为重要。本项目的目标是创建一个关于阿尔兹海默症相关生物标志物的数据库，具体目标包括：</p>\n<ul>\n<li><strong>数据收集</strong>：汇集有关阿尔兹海默症的各类生物标志物数据，包括其来源、相关文献和研究成果。</li>\n<li><strong>数据存储</strong>：通过高效的数据库管理系统，将这些数据有序存储，确保数据的完整性和安全性。</li>\n<li><strong>数据展示</strong>：设计友好的用户界面，便于用户浏览和查询生物标志物数据。</li>\n<li><strong>简单分析功能</strong>：为用户提供基本的数据分析工具，帮助研究人员与公众深入理解阿尔兹海默症的生物标志物特征。</li>\n</ul>\n<p>目标用户群体包括医学研究人员、学生、医疗工作者以及对阿尔兹海默症感兴趣的公众。预期的应用场景涵盖学术研究、教育教学、临床应用及公众健康宣传等多个领域，使得该平台能够在不同层面上发挥作用。</p>\n<h3 id=\"技术栈\"><a class=\"anchor\" href=\"#技术栈\">#</a> 技术栈</h3>\n<p>在这个项目中，我们将使用以下技术栈：</p>\n<ul>\n<li>\n<p><strong>前端</strong>：Vue 3 + Element Plus</p>\n<ul>\n<li>Vue (发音为 /vjuː/，类似 <strong>view</strong>) 是一款用于构建用户界面的 JavaScript 框架，由国人尤雨溪开发。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。更多信息可以查看<a href=\"https://cn.vuejs.org/\">官网</a>。</li>\n<li><strong>Element Plus</strong> 是一个基于 Vue 3 的 UI 组件库，由饿了么（就是送外卖那个饿了么）的前端团队开发。其提供了丰富的预设组件和样式，帮助开发者快速搭建美观且用户友好的界面。使用现成的组件可以显著减少开发时间，同时确保应用的一致性和可用性。更多信息可以查看<a href=\"https://element-plus.org/zh-CN/\">官网</a>。</li>\n</ul>\n</li>\n<li>\n<p><strong>后端</strong>：Node.js + Express</p>\n<ul>\n<li><strong>Node.js</strong> 是一个基于 Chrome V8 引擎的 JavaScript 运行时环境，允许我们使用 JavaScript 进行后端开发。它的异步特性使得处理大量并发请求变得简单高效，非常适合数据驱动的应用。</li>\n<li><strong>Express</strong> 是一个简洁而灵活的 Node.js Web 应用框架，提供了一系列强大的功能，能够快速搭建 API，使得前后端的交互更加顺畅。</li>\n</ul>\n</li>\n<li>\n<p><strong>数据库</strong>：MySQL</p>\n<ul>\n<li><strong>MySQL</strong> 是一个开源的关系型数据库管理系统，广泛应用于各种场景。它的结构化数据存储和强大的查询能力非常适合用于管理和查询生物标志物数据。同时，MySQL 的社区支持丰富，文档完善，有助于我们解决开发过程中遇到的问题。</li>\n</ul>\n</li>\n<li>\n<p><strong>包管理工具</strong>：pnpm</p>\n<ul>\n<li><strong>pnpm</strong> 是一个高效的 JavaScript 包管理工具，能够通过硬链接的方式来节省磁盘空间，并提高依赖安装的速度。使用 pnpm 可以帮助我们更好地管理项目的依赖关系，避免版本冲突，并保持项目的整洁性。</li>\n</ul>\n</li>\n<li>\n<p><strong>开发工具</strong>：VS Code</p>\n<ul>\n<li><strong>Visual Studio Code (VS Code)</strong> 是一个功能强大的代码编辑器，拥有丰富的插件支持，能够提高开发效率。它的调试功能、智能感知、代码高亮等特性，使得编写和调试代码变得更加便捷。通过配置一些常用插件（如 Prettier、ESLint），我们可以进一步提升代码质量和可维护性。</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "Vue 3",
                "Element Plus"
            ]
        },
        {
            "id": "https://new.limina.top/2024/09/20/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BD%91%E7%AB%99-00/",
            "url": "https://new.limina.top/2024/09/20/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BD%91%E7%AB%99-00/",
            "title": "使用 Vue 3 + Element Plus 从头开始写一个数据库网站",
            "date_published": "2024-09-20T10:38:10.000Z",
            "content_html": "<h1 id=\"使用-vue-3-element-plus-从头开始写一个数据库网站\"><a class=\"anchor\" href=\"#使用-vue-3-element-plus-从头开始写一个数据库网站\">#</a> 使用 Vue 3 + Element Plus 从头开始写一个数据库网站</h1>\n<h2 id=\"大纲\"><a class=\"anchor\" href=\"#大纲\">#</a> 大纲</h2>\n<h3 id=\"1-项目介绍\"><a class=\"anchor\" href=\"#1-项目介绍\">#</a> 1. <strong>项目介绍</strong></h3>\n<p>1.1 <strong>项目背景</strong></p>\n<ul>\n<li>Alzheimer’s disease Biomarker 数据库网站简介</li>\n<li>项目功能和目标：收集、存储和展示阿尔兹海默症相关生物标志物，并为公众提供查询与简单分析功能。</li>\n<li>目标用户群体与预期的应用场景</li>\n</ul>\n<p>1.2 <strong>技术栈介绍</strong></p>\n<ul>\n<li>前端：Vue 3 + Element Plus</li>\n<li>后端：Node.js + Express</li>\n<li>数据库：MySQL</li>\n<li>包管理工具：pnpm</li>\n<li>开发工具：VS Code</li>\n</ul>\n<h3 id=\"2-项目初始化与开发环境设置\"><a class=\"anchor\" href=\"#2-项目初始化与开发环境设置\">#</a> 2. <strong>项目初始化与开发环境设置</strong></h3>\n<p>2.1 <strong>创建前端项目</strong></p>\n<ul>\n<li>使用 pnpm 初始化 Vue 3 项目</li>\n<li>安装和配置 Element Plus</li>\n</ul>\n<p>2.2 <strong>后端项目设置</strong></p>\n<ul>\n<li>使用 Express 生成后端项目骨架</li>\n<li>设置与 MySQL 数据库的连接</li>\n</ul>\n<p>2.3 <strong>项目依赖安装与管理</strong></p>\n<ul>\n<li>如何使用 pnpm 来管理项目依赖</li>\n<li>安装 Vue 相关插件和 Element Plus 组件库</li>\n</ul>\n<p>2.4 <strong>开发工具配置</strong></p>\n<ul>\n<li>VS Code 插件推荐和配置</li>\n<li>Linting 和代码格式化工具的设置（如 ESLint、Prettier）</li>\n</ul>\n<h3 id=\"3-数据库设计\"><a class=\"anchor\" href=\"#3-数据库设计\">#</a> 3. <strong>数据库设计</strong></h3>\n<p>3.1 <strong>数据结构与表设计</strong></p>\n<ul>\n<li>阿尔兹海默症相关生物标志物的数据模型分析</li>\n<li>MySQL 表设计与数据库字段定义</li>\n</ul>\n<p>3.2 <strong>数据库连接与配置</strong></p>\n<ul>\n<li>在 Node.js 项目中配置 MySQL</li>\n<li>使用 Sequelize（或其他 ORM）进行数据库操作</li>\n</ul>\n<h3 id=\"4-api-设计与实现\"><a class=\"anchor\" href=\"#4-api-设计与实现\">#</a> 4. <strong>API 设计与实现</strong></h3>\n<p>4.1 <strong>API 概述</strong></p>\n<ul>\n<li>RESTful API 设计原则</li>\n<li>简要介绍项目中的 API 需求（如：标志物数据的查询、添加、更新、删除）</li>\n</ul>\n<p>4.2 <strong>实现主要 API 接口</strong></p>\n<ul>\n<li>创建和测试 API 接口：CRUD 功能</li>\n<li>数据的过滤与分页功能</li>\n</ul>\n<p>4.3 <strong>后端数据校验与错误处理</strong></p>\n<ul>\n<li>使用 Joi（或其他库）进行 API 请求的数据校验</li>\n<li>统一的错误处理与响应机制</li>\n</ul>\n<h3 id=\"5-前端功能实现\"><a class=\"anchor\" href=\"#5-前端功能实现\">#</a> 5. <strong>前端功能实现</strong></h3>\n<p>5.1 <strong>页面布局与 Element Plus 组件</strong></p>\n<ul>\n<li>使用 Element Plus 组件库创建友好的 UI</li>\n<li>布局设计与导航菜单实现</li>\n</ul>\n<p>5.2 <strong>数据展示页面</strong></p>\n<ul>\n<li>如何使用 Vue 3 的 Composition API 进行数据请求与处理</li>\n<li>展示数据库中的生物标志物数据（表格、分页等功能）</li>\n</ul>\n<p>5.3 <strong>数据查询与筛选功能</strong></p>\n<ul>\n<li>实现前端的查询功能，结合 API 获取筛选后的数据</li>\n</ul>\n<p>5.4 <strong>数据的增删改查（CRUD）功能</strong></p>\n<ul>\n<li>实现前端表单组件，用于添加和更新标志物数据</li>\n<li>删除功能的确认与用户交互设计</li>\n</ul>\n<h3 id=\"6-前后端交互\"><a class=\"anchor\" href=\"#6-前后端交互\">#</a> 6. <strong>前后端交互</strong></h3>\n<p>6.1 <strong>Axios 请求与 API 连接</strong></p>\n<ul>\n<li>如何使用 Axios 发送 HTTP 请求</li>\n<li>处理 API 响应与错误</li>\n</ul>\n<p>6.2 <strong>数据绑定与状态管理</strong></p>\n<ul>\n<li>使用 Vue 的响应式系统进行数据绑定</li>\n<li>Vuex（或 Pinia）状态管理简介与使用场景</li>\n</ul>\n<h3 id=\"7-基本数据分析功能\"><a class=\"anchor\" href=\"#7-基本数据分析功能\">#</a> 7. <strong>基本数据分析功能</strong></h3>\n<p>7.1 <strong>数据统计与分析</strong></p>\n<ul>\n<li>实现基础的数据统计（例如：生物标志物数量、类型分布等）</li>\n<li>数据的可视化（可以考虑使用 ECharts 等图表库）</li>\n</ul>\n<h3 id=\"8-项目部署\"><a class=\"anchor\" href=\"#8-项目部署\">#</a> 8. <strong>项目部署</strong></h3>\n<p>8.1 <strong>前后端项目的构建与打包</strong></p>\n<ul>\n<li>前端项目使用 Vue CLI 或 Vite 构建打包</li>\n<li>后端项目的打包与部署准备</li>\n</ul>\n<p>8.2 <strong>部署到服务器</strong></p>\n<ul>\n<li>使用 Nginx 或其他工具部署前后端项目</li>\n<li>数据库的远程连接与配置</li>\n</ul>\n<h3 id=\"9-总结与展望\"><a class=\"anchor\" href=\"#9-总结与展望\">#</a> 9. <strong>总结与展望</strong></h3>\n<p>9.1 <strong>项目中的难点与挑战</strong></p>\n<ul>\n<li>在开发过程中遇到的问题以及解决方法</li>\n</ul>\n<p>9.2 <strong>未来扩展功能</strong></p>\n<ul>\n<li>项目未来可能的功能扩展方向（如：高级数据分析、用户管理系统等）</li>\n</ul>\n<p>这个大纲涵盖了从项目背景到前端后端实现，再到项目部署的完整过程，能够帮助读者从零开始构建一个完整的数据库网站项目。</p>\n",
            "tags": [
                "Vue 3",
                "Element Plus"
            ]
        }
    ]
}