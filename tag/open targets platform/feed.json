{
    "version": "https://jsonfeed.org/version/1",
    "title": "Being on sea, sail; being on land, settle. • All posts by \"open targets platform\" tag",
    "description": "",
    "home_page_url": "https://new.limina.top",
    "items": [
        {
            "id": "https://new.limina.top/2024/08/29/GraphQL%20API%20%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/",
            "url": "https://new.limina.top/2024/08/29/GraphQL%20API%20%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/",
            "title": "GraphQL API 使用介绍：以 Open Targets Platform 为例",
            "date_published": "2024-08-29T10:51:12.000Z",
            "content_html": "<h1 id=\"graphql-api-使用介绍以-open-targets-platform-为例\"><a class=\"anchor\" href=\"#graphql-api-使用介绍以-open-targets-platform-为例\">#</a> GraphQL API 使用介绍：以 Open Targets Platform 为例</h1>\n<p>GraphQL 是一种强大的 API 查询语言，它允许客户端精确地指定所需的数据，从而优化网络请求和提高数据获取的效率。本文将通过 Open Targets Platform API 的示例，介绍如何使用 GraphQL API 进行数据查询。</p>\n<h2 id=\"理解-graphql-schema\"><a class=\"anchor\" href=\"#理解-graphql-schema\">#</a> 理解 GraphQL Schema</h2>\n<p>GraphQL API 的核心是其 Schema，Schema 定义了 API 中所有可用的查询（Query）、变更（Mutation）和订阅（Subscription），以及每个字段的类型和关系。Schema 可以被视为 API 的 “合同”，它规定了客户端可以请求的数据类型和结构。</p>\n<p>为了具体说明，我们以 Open Targets Platform 的 GraphQL Schema 为例。这个平台为研究疾病和药物靶点的关联提供了丰富的数据，适用于生物信息学和药物开发领域。</p>\n<h2 id=\"open-targets-platform-api-的-schema-结构\"><a class=\"anchor\" href=\"#open-targets-platform-api-的-schema-结构\">#</a> Open Targets Platform API 的 Schema 结构</h2>\n<p>在 Open Targets Platform 的 GraphQL Schema 中，核心查询类型包括  <code>target</code> 、 <code>disease</code> 、 <code>drug</code>  和  <code>search</code>  等，这些类型对应不同的数据实体，例如基因、疾病、药物等。</p>\n<figure class=\"highlight graphql\"><figcaption data-lang=\"GraphQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token attr-name\">target</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">ensemblId</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Target</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token attr-name\">disease</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Disease</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token attr-name\">drug</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Drug</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token attr-name\">search</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">queryString</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">SearchResults</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><strong>target</strong>: 用于获取与特定靶点（基因）相关的信息，如该数据库使用的 Ensembl ID ( <code>ensemblId</code> )。</li>\n<li><strong>disease</strong>: 获取与特定疾病 / 表型的相关的信息，如疾病的 ID ( <code>id</code> )，该数据库使用了多个来源的疾病 ID 如 EFO ID 、MONDO ID 和 OTAR ID 等。</li>\n<li><strong>drug</strong>: 获取特定药物的信息，如药物 ID，该数据库使用 ChEMBL ID ( <code>id</code> )。</li>\n<li><strong>search</strong>: 进行关键词搜索，返回与查询字符串匹配的所有实体。</li>\n</ul>\n<p>这些查询类型返回的数据结构可以是对象（例如  <code>Target</code> 、 <code>Disease</code> 、 <code>Drug</code> ）或包含多个对象的列表。</p>\n<h2 id=\"使用-graphql-查询-open-targets-数据\"><a class=\"anchor\" href=\"#使用-graphql-查询-open-targets-数据\">#</a> 使用 GraphQL 查询 Open Targets 数据</h2>\n<h3 id=\"查询基因靶点信息\"><a class=\"anchor\" href=\"#查询基因靶点信息\">#</a> 查询基因靶点信息</h3>\n<p>假设我们要获取与特定基因（如 AR 基因，Ensembl ID 为  <code>ENSG00000169083</code> ）相关的详细信息，包括遗传约束（genetic constraint）和靶点可成药性（tractability）评估。我们可以通过以下 GraphQL 查询实现：</p>\n<figure class=\"highlight graphql\"><figcaption data-lang=\"GraphQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">query</span> <span class=\"token definition-query function\">targetInfo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property-query\">target</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">ensemblId</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"ENSG00000169083\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">id</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">approvedSymbol</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">biotype</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token object\">geneticConstraint</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token property\">constraintType</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token property\">exp</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token property\">obs</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token property\">score</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token property\">oe</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token property\">oeLower</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token property\">oeUpper</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token object\">tractability</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token property\">label</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token property\">modality</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token property\">value</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这段查询代码会返回基因的基本信息以及相关的遗传约束和靶点可成药性数据。通过这种方式，客户端可以精确获取所需的数据字段，避免了过度获取或不足获取的问题。</p>\n<h2 id=\"查询疾病信息\"><a class=\"anchor\" href=\"#查询疾病信息\">#</a> 查询疾病信息</h2>\n<p>类似地，我们可以通过以下查询获取与某种疾病（如透明细胞肾癌，EFO ID 为  <code>EFO_0000349</code> ）的相关信息，包括相关靶标（associatedTargets）和已知药物（knownDrugs）等：</p>\n<figure class=\"highlight graphql\"><figcaption data-lang=\"GraphQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">query</span> <span class=\"token definition-query function\">diseaseInfo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property-query\">disease</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">efoId</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"EFO_0000349\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">id</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">name</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token object\">associatedTargets</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token property\">count</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token object\">rows</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token property\">score</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token object\">target</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token property\">id</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token property\">approvedName</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token property\">approvedSymbol</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token object\">knownDrugs</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token property\">uniqueDrugs</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token property\">uniqueTargets</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token property\">count</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token object\">rows</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token property\">approvedName</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token property\">approvedSymbol</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token property\">targetId</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token property\">drugId</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个查询会返回疾病的基本信息、与该疾病相关的基因靶点以及已知的药物信息。</p>\n<h2 id=\"执行搜索查询\"><a class=\"anchor\" href=\"#执行搜索查询\">#</a> 执行搜索查询</h2>\n<p>如果我们不确定要查询的具体实体，可以使用  <code>search</code>  查询，通过关键词搜索平台中的所有相关实体：</p>\n<figure class=\"highlight graphql\"><figcaption data-lang=\"GraphQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">query</span> <span class=\"token definition-query function\">searchEntities</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property-query\">search</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">queryString</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"breast cancer\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token object\">aggregations</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token property\">total</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token object\">entities</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token property\">name</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token property\">total</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token object\">categories</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token property\">name</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token property\">total</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token object\">hits</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token property\">id</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token property\">entity</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token property\">category</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token property\">name</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token property\">score</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这将返回与 “乳腺癌” 相关的所有实体，如基因、疾病或药物。</p>\n<h2 id=\"联合类型\"><a class=\"anchor\" href=\"#联合类型\">#</a> 联合类型</h2>\n<p>在 GraphQL 中，联合类型（union）允许一个字段可以返回多种不同类型的对象。Open Targets API 文档中定义了一个  <code>EntityUnionType</code>  联合类型，它可以是  <code>Target</code> 、 <code>Drug</code>  或  <code>Disease</code> ，你可以在查询中使用 “内联片段”（inline fragments）来根据实际返回的类型提取对应的字段。下面是一个示例查询，展示如何处理联合类型：</p>\n<figure class=\"highlight graphql\"><figcaption data-lang=\"GraphQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">query</span> <span class=\"token definition-query function\">disease</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property-query\">disease</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">efoId</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"EFO_0005952\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">id</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">name</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">description</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">dbXRefs</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token object\">similarEntities</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token property\">category</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token property\">id</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token property\">score</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token object\">object</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token operator\">...</span> <span class=\"token keyword\">on</span> <span class=\"token class-name\">Target</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token property\">id</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token operator\">...</span> <span class=\"token keyword\">on</span> <span class=\"token class-name\">Drug</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token property\">id</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token operator\">...</span> <span class=\"token keyword\">on</span> <span class=\"token class-name\">Disease</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token property\">id</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上面的 GraphQL 查询中， <code>object &#123; ... &#125;</code>  使用了内联片段来处理联合类型，以获取相似实体的具体对象</p>\n<p>因为  <code>object</code>  字段可能返回不同类型的对象（Target、Drug、Disease），因此我们需要根据实际类型使用内联片段来提取具体字段。</p>\n<ul>\n<li><code>... on Target &#123; id, approvedSymbol &#125;</code> : 如果  <code>object</code>  是一个  <code>Target</code>  类型，提取其  <code>id</code>  和  <code>approvedSymbol</code>  字段。</li>\n<li><code>... on Drug &#123; id, drugType &#125;</code> : 如果  <code>object</code>  是一个  <code>Drug</code>  类型，提取其  <code>id</code>  和  <code>drugType</code>  字段。</li>\n<li><code>... on Disease &#123; id, name &#125;</code> : 如果  <code>object</code>  是一个  <code>Disease</code>  类型，提取其  <code>id</code>  和  <code>name</code>  字段。</li>\n</ul>\n<p>这种方式允许我们在处理联合类型时，根据返回的实际类型提取不同的字段。每个内联片段会对应一种可能的类型，你可以在每个片段中定义需要提取的字段。</p>\n<h2 id=\"在代码中使用-open-targets-platform-的-graphql-api\"><a class=\"anchor\" href=\"#在代码中使用-open-targets-platform-的-graphql-api\">#</a> 在代码中使用 Open Targets Platform 的 GraphQL API</h2>\n<p>要在代码中使用这些查询，可以通过 Python 的  <code>requests</code>  库发送 HTTP POST 请求，以下是一个完整的 Python 示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># GraphQL 查询字符串</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>query <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>query targetInfo &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  target(ensemblId: \"ENSG00000169083\") &#123;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    id</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    approvedSymbol</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    biotype</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    geneticConstraint &#123;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      constraintType</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      exp</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      obs</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      score</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      oe</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      oeLower</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      oeUpper</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    tractability &#123;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      label</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      modality</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      value</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># GraphQL API 的 URL</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://api.platform.opentargets.org/api/v4/graphql\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\"># 发送 POST 请求</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> json<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">:</span> query<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\"># 打印返回的 JSON 数据</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> indent<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这个脚本发送了一个 GraphQL 查询请求，并将返回的数据打印出来。你可以根据需要修改查询字符串，获取其他类型的数据。</p>\n<h2 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h2>\n<p>在上面的 GraphQL 查询字符串中，我们在前面都写了一个  <code>query xxx</code> 。在 GraphQL 中， <code>query</code>  关键字是可选的，可以用于明确表示这是一个查询操作。例如加上  <code>query KnownDrugs</code>  和不加的区别主要体现在以下几个方面：</p>\n<ol>\n<li>\n<p><strong>可读性</strong>：</p>\n<ul>\n<li><strong>加上  <code>query KnownDrugs</code> </strong>：这种方式使得查询更具可读性和结构化，特别是在有多个查询、变更或订阅操作时。 <code>KnownDrugs</code>  是查询的操作名称（Operation Name），可以帮助开发者或工具在执行和调试时更容易识别和引用该查询。</li>\n<li><strong>不加  <code>query KnownDrugs</code> </strong>：省略  <code>query</code>  关键字也可以正常执行查询，但可能在复杂场景下可读性略差。</li>\n</ul>\n</li>\n<li>\n<p><strong>Operation Name</strong>：</p>\n<ul>\n<li><strong>加上  <code>query KnownDrugs</code> </strong>： <code>KnownDrugs</code>  成为该查询的操作名称（Operation Name）。在某些情况下，例如日志记录、错误跟踪、缓存或在前端工具中，可以通过这个名称来标识和引用该查询。</li>\n<li><strong>不加  <code>query KnownDrugs</code> </strong>：查询没有操作名称，直接开始查询内容。这在简单的查询中通常没什么影响，但在复杂的项目或应用程序中可能会失去一些管理查询的便利性。</li>\n</ul>\n</li>\n<li>\n<p><strong>调试与开发工具支持</strong>：</p>\n<ul>\n<li><strong>加上  <code>query KnownDrugs</code> </strong>：许多开发工具和 IDE 可以利用操作名称来显示查询的结构，并提供更好的调试和分析支持。</li>\n<li><strong>不加  <code>query KnownDrugs</code> </strong>：省略操作名称后，工具的支持仍然存在，但会失去通过名称直接引用查询的能力。</li>\n</ul>\n</li>\n</ol>\n<p>在实际使用中，如果查询比较简单，可以省略操作名称；如果查询复杂或需要标识查询的特定用途，建议加上操作名称。</p>\n",
            "tags": [
                "API",
                "GraphQL API",
                "Open Targets Platform"
            ]
        }
    ]
}